
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000007a2  00000836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  0000084c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013cb  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000280  00000000  00000000  00001d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000453  00000000  00000000  00001fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f0  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e2  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9b 02 	call	0x536	; 0x536 <main>
  8a:	0c 94 cf 03 	jmp	0x79e	; 0x79e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
	else
	pinChange(D4,0);
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
  96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
  98:	00 97       	sbiw	r24, 0x00	; 0

	if(a & 32)
  9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
  9c:	d8 98       	cbi	0x1b, 0	; 27
	pinChange(D5,1);
  9e:	08 95       	ret
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
  a6:	d9 98       	cbi	0x1b, 1	; 27
  a8:	08 95       	ret
  aa:	82 30       	cpi	r24, 0x02	; 2
	else
	pinChange(D5,0);
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
	
	if(a & 64)
  b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
  ba:	db 98       	cbi	0x1b, 3	; 27
	pinChange(D6,1);
  bc:	08 95       	ret
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	91 05       	cpc	r25, r1
  c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
  c4:	dc 98       	cbi	0x1b, 4	; 27
  c6:	08 95       	ret
  c8:	85 30       	cpi	r24, 0x05	; 5
	else
	pinChange(D6,0);
  ca:	91 05       	cpc	r25, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	08 95       	ret
  d2:	86 30       	cpi	r24, 0x06	; 6
  d4:	91 05       	cpc	r25, r1
	
	if(a & 128)
  d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
  d8:	de 98       	cbi	0x1b, 6	; 27
	pinChange(D7,1);
  da:	08 95       	ret
  dc:	87 30       	cpi	r24, 0x07	; 7
  de:	91 05       	cpc	r25, r1
  e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
  e2:	df 98       	cbi	0x1b, 7	; 27
  e4:	08 95       	ret
  e6:	8a 30       	cpi	r24, 0x0A	; 10
	else
	pinChange(D7,0);
  e8:	91 05       	cpc	r25, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	91 05       	cpc	r25, r1
}
  f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
  f6:	c1 98       	cbi	0x18, 1	; 24
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
		else if(a == eS_PORTB0)
		  PORTB &= ~(1<<PB0);  
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
  f8:	08 95       	ret
		else if(a == eS_PORTB2)
  fa:	8c 30       	cpi	r24, 0x0C	; 12
  fc:	91 05       	cpc	r25, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	08 95       	ret
		else if(a == eS_PORTB3)
 104:	8d 30       	cpi	r24, 0x0D	; 13
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
 10a:	c3 98       	cbi	0x18, 3	; 24
 10c:	08 95       	ret
		else if(a == eS_PORTB4)
 10e:	8e 30       	cpi	r24, 0x0E	; 14
 110:	91 05       	cpc	r25, r1
 112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	08 95       	ret
		else if(a == eS_PORTB5)
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	91 05       	cpc	r25, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 11e:	c5 98       	cbi	0x18, 5	; 24
 120:	08 95       	ret
		else if(a == eS_PORTB6)
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 128:	c6 98       	cbi	0x18, 6	; 24
 12a:	08 95       	ret
		else if(a == eS_PORTB7)
 12c:	81 31       	cpi	r24, 0x11	; 17
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 132:	c7 98       	cbi	0x18, 7	; 24
 134:	08 95       	ret
		else if(a == eS_PORTC0)
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	08 95       	ret
		else if(a == eS_PORTC1)
 140:	85 31       	cpi	r24, 0x15	; 21
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 146:	a9 98       	cbi	0x15, 1	; 21
 148:	08 95       	ret
		else if(a == eS_PORTC2)
 14a:	86 31       	cpi	r24, 0x16	; 22
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret
		else if(a == eS_PORTC3)
 154:	87 31       	cpi	r24, 0x17	; 23
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 15a:	ab 98       	cbi	0x15, 3	; 21
 15c:	08 95       	ret
		else if(a == eS_PORTC4)
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 164:	ac 98       	cbi	0x15, 4	; 21
 166:	08 95       	ret
		else if(a == eS_PORTC5)
 168:	89 31       	cpi	r24, 0x19	; 25
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 16e:	ad 98       	cbi	0x15, 5	; 21
 170:	08 95       	ret
        else if(a == eS_PORTC6)
 172:	8a 31       	cpi	r24, 0x1A	; 26
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 178:	ae 98       	cbi	0x15, 6	; 21
 17a:	08 95       	ret
		else if(a == eS_PORTC7)
 17c:	8b 31       	cpi	r24, 0x1B	; 27
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 182:	af 98       	cbi	0x15, 7	; 21
 184:	08 95       	ret
		else if(a == eS_PORTD0)
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	08 95       	ret
		else if(a == eS_PORTD1)
 190:	8f 31       	cpi	r24, 0x1F	; 31
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 196:	91 98       	cbi	0x12, 1	; 18
 198:	08 95       	ret
		else if(a == eS_PORTD2)
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	08 95       	ret
		else if(a == eS_PORTD3)
 1a4:	81 32       	cpi	r24, 0x21	; 33
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 1aa:	93 98       	cbi	0x12, 3	; 18
 1ac:	08 95       	ret
		else if(a == eS_PORTD4)
 1ae:	82 32       	cpi	r24, 0x22	; 34
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1b4:	94 98       	cbi	0x12, 4	; 18
 1b6:	08 95       	ret
		else if(a == eS_PORTD5)
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1be:	95 98       	cbi	0x12, 5	; 18
 1c0:	08 95       	ret
		else if(a == eS_PORTD6)
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
		else if(a == eS_PORTD7)
 1cc:	85 97       	sbiw	r24, 0x25	; 37
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
 1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
 1d2:	97 98       	cbi	0x12, 7	; 18
 1d4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1da:	d8 9a       	sbi	0x1b, 0	; 27
 1dc:	08 95       	ret
		else if(a == eS_PORTA1)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	08 95       	ret
		else if(a == eS_PORTA2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret
		else if(a == eS_PORTA3)
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1f8:	db 9a       	sbi	0x1b, 3	; 27
 1fa:	08 95       	ret
		else if(a == eS_PORTA4)
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	91 05       	cpc	r25, r1
 200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 202:	dc 9a       	sbi	0x1b, 4	; 27
 204:	08 95       	ret
		else if(a == eS_PORTA5)
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 20c:	dd 9a       	sbi	0x1b, 5	; 27
 20e:	08 95       	ret
		else if(a == eS_PORTA6)
 210:	86 30       	cpi	r24, 0x06	; 6
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	08 95       	ret
		else if(a == eS_PORTA7)
 21a:	87 30       	cpi	r24, 0x07	; 7
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 220:	df 9a       	sbi	0x1b, 7	; 27
 222:	08 95       	ret
		else if(a == eS_PORTB0)
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	91 05       	cpc	r25, r1
 228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	08 95       	ret
		else if(a == eS_PORTB1)
 22e:	8b 30       	cpi	r24, 0x0B	; 11
 230:	91 05       	cpc	r25, r1
 232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	08 95       	ret
		else if(a == eS_PORTB2)
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	91 05       	cpc	r25, r1
 23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 23e:	c2 9a       	sbi	0x18, 2	; 24
 240:	08 95       	ret
		else if(a == eS_PORTB3)
 242:	8d 30       	cpi	r24, 0x0D	; 13
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	08 95       	ret
		else if(a == eS_PORTB4)
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	91 05       	cpc	r25, r1
 250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 252:	c4 9a       	sbi	0x18, 4	; 24
 254:	08 95       	ret
		else if(a == eS_PORTB5)
 256:	8f 30       	cpi	r24, 0x0F	; 15
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 25c:	c5 9a       	sbi	0x18, 5	; 24
 25e:	08 95       	ret
		else if(a == eS_PORTB6)
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
		else if(a == eS_PORTB7)
 26a:	81 31       	cpi	r24, 0x11	; 17
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 270:	c7 9a       	sbi	0x18, 7	; 24
 272:	08 95       	ret
		else if(a == eS_PORTC0)
 274:	84 31       	cpi	r24, 0x14	; 20
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 27a:	a8 9a       	sbi	0x15, 0	; 21
 27c:	08 95       	ret
		else if(a == eS_PORTC1)
 27e:	85 31       	cpi	r24, 0x15	; 21
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	08 95       	ret
		else if(a == eS_PORTC2)
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 28e:	aa 9a       	sbi	0x15, 2	; 21
 290:	08 95       	ret
		else if(a == eS_PORTC3)
 292:	87 31       	cpi	r24, 0x17	; 23
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 298:	ab 9a       	sbi	0x15, 3	; 21
 29a:	08 95       	ret
		else if(a == eS_PORTC4)
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 2a2:	ac 9a       	sbi	0x15, 4	; 21
 2a4:	08 95       	ret
		else if(a == eS_PORTC5)
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 2ac:	ad 9a       	sbi	0x15, 5	; 21
 2ae:	08 95       	ret
		else if(a == eS_PORTC6)
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2b6:	ae 9a       	sbi	0x15, 6	; 21
 2b8:	08 95       	ret
		else if(a == eS_PORTC7)
 2ba:	8b 31       	cpi	r24, 0x1B	; 27
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	08 95       	ret
		else if(a == eS_PORTD0)
 2c4:	8e 31       	cpi	r24, 0x1E	; 30
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	08 95       	ret
		else if(a == eS_PORTD1)
 2ce:	8f 31       	cpi	r24, 0x1F	; 31
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2d4:	91 9a       	sbi	0x12, 1	; 18
 2d6:	08 95       	ret
		else if(a == eS_PORTD2)
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	08 95       	ret
		else if(a == eS_PORTD3)
 2e2:	81 32       	cpi	r24, 0x21	; 33
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2e8:	93 9a       	sbi	0x12, 3	; 18
 2ea:	08 95       	ret
		else if(a == eS_PORTD4)
 2ec:	82 32       	cpi	r24, 0x22	; 34
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2f2:	94 9a       	sbi	0x12, 4	; 18
 2f4:	08 95       	ret
		else if(a == eS_PORTD5)
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2fc:	95 9a       	sbi	0x12, 5	; 18
 2fe:	08 95       	ret
		else if(a == eS_PORTD6)
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
		  PORTD |= (1<<PD6);
 306:	96 9a       	sbi	0x12, 6	; 18
 308:	08 95       	ret
		else if(a == eS_PORTD7)
 30a:	85 97       	sbiw	r24, 0x25	; 37
 30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 30e:	97 9a       	sbi	0x12, 7	; 18
 310:	08 95       	ret

00000312 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	if(a & 1)
 316:	80 ff       	sbrs	r24, 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <Lcd4_Port+0x16>
	pinChange(D4,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	82 e2       	ldi	r24, 0x22	; 34
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 326:	06 c0       	rjmp	.+12     	; 0x334 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	82 e2       	ldi	r24, 0x22	; 34
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
 334:	c1 ff       	sbrs	r28, 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <Lcd4_Port+0x34>
	pinChange(D5,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	83 e2       	ldi	r24, 0x23	; 35
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 344:	06 c0       	rjmp	.+12     	; 0x352 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	83 e2       	ldi	r24, 0x23	; 35
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
 352:	c2 ff       	sbrs	r28, 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <Lcd4_Port+0x52>
	pinChange(D6,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	84 e2       	ldi	r24, 0x24	; 36
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 362:	06 c0       	rjmp	.+12     	; 0x370 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	84 e2       	ldi	r24, 0x24	; 36
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
 370:	c3 ff       	sbrs	r28, 3
 372:	07 c0       	rjmp	.+14     	; 0x382 <Lcd4_Port+0x70>
	pinChange(D7,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 380:	06 c0       	rjmp	.+12     	; 0x38e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	85 e2       	ldi	r24, 0x25	; 37
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8a e1       	ldi	r24, 0x1A	; 26
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	8b e1       	ldi	r24, 0x1B	; 27
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd4_Cmd+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd4_Cmd+0x2c>
 3be:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8b e1       	ldi	r24, 0x1B	; 27
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3cc:	8f e9       	ldi	r24, 0x9F	; 159
 3ce:	9f e0       	ldi	r25, 0x0F	; 15
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Lcd4_Cmd+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Lcd4_Cmd+0x44>
 3d6:	00 00       	nop
	_delay_ms(1);
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3e8:	08 95       	ret

000003ea <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 3ea:	cf 93       	push	r28
 3ec:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	59 f4       	brne	.+22     	; 0x408 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 3f6:	82 95       	swap	r24
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 406:	0c c0       	rjmp	.+24     	; 0x420 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	51 f4       	brne	.+20     	; 0x420 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 410:	82 95       	swap	r24
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 418:	8c 2f       	mov	r24, r28
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	}
}
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	89 ef       	ldi	r24, 0xF9	; 249
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <Lcd4_Init+0xc>
 438:	00 c0       	rjmp	.+0      	; 0x43a <Lcd4_Init+0x16>
 43a:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 442:	8f e1       	ldi	r24, 0x1F	; 31
 444:	9e e4       	ldi	r25, 0x4E	; 78
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <Lcd4_Init+0x22>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <Lcd4_Init+0x28>
 44c:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 454:	8f ed       	ldi	r24, 0xDF	; 223
 456:	9b ea       	ldi	r25, 0xAB	; 171
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <Lcd4_Init+0x34>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <Lcd4_Init+0x3a>
 45e:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 472:	88 e0       	ldi	r24, 0x08	; 8
 474:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 490:	08 95       	ret

00000492 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 492:	cf 93       	push	r28
 494:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	8a e1       	ldi	r24, 0x1A	; 26
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 4a2:	8c 2f       	mov	r24, r28
 4a4:	82 95       	swap	r24
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	8b e1       	ldi	r24, 0x1B	; 27
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4b8:	8f e9       	ldi	r24, 0x9F	; 159
 4ba:	9f e0       	ldi	r25, 0x0F	; 15
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <Lcd4_Write_Char+0x2a>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <Lcd4_Write_Char+0x30>
 4c2:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	8b e1       	ldi	r24, 0x1B	; 27
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4d0:	8f e9       	ldi	r24, 0x9F	; 159
 4d2:	9f e0       	ldi	r25, 0x0F	; 15
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <Lcd4_Write_Char+0x42>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <Lcd4_Write_Char+0x48>
 4da:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 4dc:	8c 2f       	mov	r24, r28
 4de:	8f 70       	andi	r24, 0x0F	; 15
 4e0:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	8b e1       	ldi	r24, 0x1B	; 27
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4f0:	8f e9       	ldi	r24, 0x9F	; 159
 4f2:	9f e0       	ldi	r25, 0x0F	; 15
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <Lcd4_Write_Char+0x62>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <Lcd4_Write_Char+0x68>
 4fa:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	8b e1       	ldi	r24, 0x1B	; 27
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 508:	8f e9       	ldi	r24, 0x9F	; 159
 50a:	9f e0       	ldi	r25, 0x0F	; 15
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <Lcd4_Write_Char+0x7a>
 510:	00 c0       	rjmp	.+0      	; 0x512 <Lcd4_Write_Char+0x80>
 512:	00 00       	nop
	_delay_ms(1);
}
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 51e:	88 81       	ld	r24, Y
 520:	88 23       	and	r24, r24
 522:	31 f0       	breq	.+12     	; 0x530 <Lcd4_Write_String+0x18>
 524:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 526:	0e 94 49 02 	call	0x492	; 0x492 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 52a:	89 91       	ld	r24, Y+
 52c:	81 11       	cpse	r24, r1
 52e:	fb cf       	rjmp	.-10     	; 0x526 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <main>:
#define STOP_TIMER0  TCCR1B &= 0B11111000
#define CLEAR_TIMER0 TCNT0 = 0
int state = 0;
int intakeVote = 0;

int main(void){
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	c0 54       	subi	r28, 0x40	; 64
 540:	d1 09       	sbc	r29, r1
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0x00;
 54c:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 552:	81 bb       	out	0x11, r24	; 17
	OCR1A=250;									//For TImer
 554:	8a ef       	ldi	r24, 0xFA	; 250
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9b bd       	out	0x2b, r25	; 43
 55a:	8a bd       	out	0x2a, r24	; 42
	TIMSK|=(1<<OCIE1A);							//For Timer
 55c:	89 b7       	in	r24, 0x39	; 57
 55e:	80 61       	ori	r24, 0x10	; 16
 560:	89 bf       	out	0x39, r24	; 57
	
	sei();								//Timer Globally defined
 562:	78 94       	sei
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	80 e7       	ldi	r24, 0x70	; 112
 568:	92 e0       	ldi	r25, 0x02	; 2
 56a:	21 50       	subi	r18, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <main+0x34>
 572:	00 c0       	rjmp	.+0      	; 0x574 <main+0x3e>
 574:	00 00       	nop
	 char SHOWC [16]; // person3 votes displaying character on LCD
	 int16_t COUNTD = 0; // person4 votes storing memory
	 char SHOWD [16]; //person4 votes displaying character on LCD
	
	
	Lcd4_Init();
 576:	0e 94 12 02 	call	0x424	; 0x424 <Lcd4_Init>
	
	Lcd4_Clear();
 57a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
	Lcd4_Set_Cursor(1,1);
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
	 char SHOWA [16]; // person1 votes displaying character on LCD
	 int16_t COUNTB = 0;  // person2 votes storing memory
	 char SHOWB [16]; // person2 votes displaying character on LCD
	 int16_t COUNTC = 0; // person3 votes storing memory
	 char SHOWC [16]; // person3 votes displaying character on LCD
	 int16_t COUNTD = 0; // person4 votes storing memory
 586:	a1 2c       	mov	r10, r1
 588:	b1 2c       	mov	r11, r1
	
	 int16_t COUNTA = 0; // person1 votes storing memory
	 char SHOWA [16]; // person1 votes displaying character on LCD
	 int16_t COUNTB = 0;  // person2 votes storing memory
	 char SHOWB [16]; // person2 votes displaying character on LCD
	 int16_t COUNTC = 0; // person3 votes storing memory
 58a:	c1 2c       	mov	r12, r1
 58c:	d1 2c       	mov	r13, r1
	_delay_ms(50);						//giving delay of 50ms
	
	
	 int16_t COUNTA = 0; // person1 votes storing memory
	 char SHOWA [16]; // person1 votes displaying character on LCD
	 int16_t COUNTB = 0;  // person2 votes storing memory
 58e:	e1 2c       	mov	r14, r1
 590:	f1 2c       	mov	r15, r1
	
	sei();								//Timer Globally defined
	_delay_ms(50);						//giving delay of 50ms
	
	
	 int16_t COUNTA = 0; // person1 votes storing memory
 592:	00 e0       	ldi	r16, 0x00	; 0
 594:	10 e0       	ldi	r17, 0x00	; 0
				strcat(SHOWA,SHOWC);
				strcat(SHOWA,SHOWD);
				Lcd4_Set_Cursor(1,1);
				Lcd4_Write_String(SHOWA);
				if(!bit_is_clear(PINB, 4)){
					intakeVote = 1;
 596:	88 24       	eor	r8, r8
 598:	83 94       	inc	r8
 59a:	91 2c       	mov	r9, r1
					Lcd4_Clear();
					Lcd4_Set_Cursor(1,1);
					Lcd4_Write_String("Please cast your vote");
					START_TIMER0;
 59c:	0f 2e       	mov	r0, r31
 59e:	fb e0       	ldi	r31, 0x0B	; 11
 5a0:	7f 2e       	mov	r7, r31
 5a2:	f0 2d       	mov	r31, r0
	
	Lcd4_Clear();
	Lcd4_Set_Cursor(1,1);
    while (1) 
    {
		switch(state){
 5a4:	80 91 78 00 	lds	r24, 0x0078
 5a8:	90 91 79 00 	lds	r25, 0x0079
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	29 f0       	breq	.+10     	; 0x5ba <main+0x84>
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	91 05       	cpc	r25, r1
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <main+0x82>
 5b6:	54 c0       	rjmp	.+168    	; 0x660 <main+0x12a>
 5b8:	f9 cf       	rjmp	.-14     	; 0x5ac <main+0x76>
			case 0:
				itoa(COUNTA,SHOWA,10);
 5ba:	4a e0       	ldi	r20, 0x0A	; 10
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	be 01       	movw	r22, r28
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	c8 01       	movw	r24, r16
 5c6:	0e 94 8f 03 	call	0x71e	; 0x71e <itoa>
				itoa(COUNTB,SHOWB,10);
 5ca:	4a e0       	ldi	r20, 0x0A	; 10
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	be 01       	movw	r22, r28
 5d0:	6f 5e       	subi	r22, 0xEF	; 239
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	c7 01       	movw	r24, r14
 5d6:	0e 94 8f 03 	call	0x71e	; 0x71e <itoa>
				itoa(COUNTC,SHOWC,10);
 5da:	4a e0       	ldi	r20, 0x0A	; 10
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	be 01       	movw	r22, r28
 5e0:	6f 5d       	subi	r22, 0xDF	; 223
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	c6 01       	movw	r24, r12
 5e6:	0e 94 8f 03 	call	0x71e	; 0x71e <itoa>
				itoa(COUNTD,SHOWD,10);
 5ea:	4a e0       	ldi	r20, 0x0A	; 10
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	be 01       	movw	r22, r28
 5f0:	6f 5c       	subi	r22, 0xCF	; 207
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	c5 01       	movw	r24, r10
 5f6:	0e 94 8f 03 	call	0x71e	; 0x71e <itoa>
				
				strcat(SHOWA,SHOWB);
 5fa:	be 01       	movw	r22, r28
 5fc:	6f 5e       	subi	r22, 0xEF	; 239
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	0e 94 84 03 	call	0x708	; 0x708 <strcat>
				strcat(SHOWA,SHOWC);
 608:	be 01       	movw	r22, r28
 60a:	6f 5d       	subi	r22, 0xDF	; 223
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	ce 01       	movw	r24, r28
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	0e 94 84 03 	call	0x708	; 0x708 <strcat>
				strcat(SHOWA,SHOWD);
 616:	be 01       	movw	r22, r28
 618:	6f 5c       	subi	r22, 0xCF	; 207
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	ce 01       	movw	r24, r28
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	0e 94 84 03 	call	0x708	; 0x708 <strcat>
				Lcd4_Set_Cursor(1,1);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
				Lcd4_Write_String(SHOWA);
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
				if(!bit_is_clear(PINB, 4)){
 634:	b4 9b       	sbis	0x16, 4	; 22
 636:	b6 cf       	rjmp	.-148    	; 0x5a4 <main+0x6e>
					intakeVote = 1;
 638:	90 92 77 00 	sts	0x0077, r9
 63c:	80 92 76 00 	sts	0x0076, r8
					Lcd4_Clear();
 640:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
					Lcd4_Set_Cursor(1,1);
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Lcd4_Set_Cursor>
					Lcd4_Write_String("Please cast your vote");
 64c:	80 e6       	ldi	r24, 0x60	; 96
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 8c 02 	call	0x518	; 0x518 <Lcd4_Write_String>
					START_TIMER0;
 654:	7e bc       	out	0x2e, r7	; 46
					state = 1;
 656:	90 92 79 00 	sts	0x0079, r9
 65a:	80 92 78 00 	sts	0x0078, r8
 65e:	a2 cf       	rjmp	.-188    	; 0x5a4 <main+0x6e>
				}
				break;
			case 1:
				if(!bit_is_clear(PINB,4)){
 660:	b4 9b       	sbis	0x16, 4	; 22
 662:	13 c0       	rjmp	.+38     	; 0x68a <main+0x154>
					intakeVote = 0;
 664:	10 92 77 00 	sts	0x0077, r1
 668:	10 92 76 00 	sts	0x0076, r1
					STOP_TIMER0;
 66c:	8e b5       	in	r24, 0x2e	; 46
 66e:	88 7f       	andi	r24, 0xF8	; 248
 670:	8e bd       	out	0x2e, r24	; 46
					CLEAR_TIMER0;
 672:	12 be       	out	0x32, r1	; 50
					clock_millisecond = 0;
 674:	10 92 7b 00 	sts	0x007B, r1
 678:	10 92 7a 00 	sts	0x007A, r1
					Lcd4_Clear();
 67c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
					state = 1;
 680:	90 92 79 00 	sts	0x0079, r9
 684:	80 92 78 00 	sts	0x0078, r8
 688:	8d cf       	rjmp	.-230    	; 0x5a4 <main+0x6e>
				}else{
					if(!bit_is_clear(PINB,0)){
 68a:	b0 9b       	sbis	0x16, 0	; 22
 68c:	0d c0       	rjmp	.+26     	; 0x6a8 <main+0x172>
						PORTC |= (1<<0);
 68e:	a8 9a       	sbi	0x15, 0	; 21
						COUNTA++;
 690:	0f 5f       	subi	r16, 0xFF	; 255
 692:	1f 4f       	sbci	r17, 0xFF	; 255
						STOP_TIMER0;
 694:	8e b5       	in	r24, 0x2e	; 46
 696:	88 7f       	andi	r24, 0xF8	; 248
 698:	8e bd       	out	0x2e, r24	; 46
						state = 0;
 69a:	10 92 79 00 	sts	0x0079, r1
 69e:	10 92 78 00 	sts	0x0078, r1
						Lcd4_Clear();
 6a2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
 6a6:	7e cf       	rjmp	.-260    	; 0x5a4 <main+0x6e>
					}else if(!bit_is_clear(PINB,1)){
 6a8:	b1 9b       	sbis	0x16, 1	; 22
 6aa:	0e c0       	rjmp	.+28     	; 0x6c8 <main+0x192>
						PORTC |= (1<<1);
 6ac:	a9 9a       	sbi	0x15, 1	; 21
						COUNTB++;
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	e2 1a       	sub	r14, r18
 6b2:	f2 0a       	sbc	r15, r18
						STOP_TIMER0;
 6b4:	8e b5       	in	r24, 0x2e	; 46
 6b6:	88 7f       	andi	r24, 0xF8	; 248
 6b8:	8e bd       	out	0x2e, r24	; 46
						state = 0;
 6ba:	10 92 79 00 	sts	0x0079, r1
 6be:	10 92 78 00 	sts	0x0078, r1
						Lcd4_Clear();
 6c2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
 6c6:	6e cf       	rjmp	.-292    	; 0x5a4 <main+0x6e>
					}else if(!bit_is_clear(PINB,2)){
 6c8:	b2 9b       	sbis	0x16, 2	; 22
 6ca:	0e c0       	rjmp	.+28     	; 0x6e8 <main+0x1b2>
						PORTC |= (1<<2);
 6cc:	aa 9a       	sbi	0x15, 2	; 21
						COUNTC++;
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	c8 1a       	sub	r12, r24
 6d2:	d8 0a       	sbc	r13, r24
						STOP_TIMER0;
 6d4:	8e b5       	in	r24, 0x2e	; 46
 6d6:	88 7f       	andi	r24, 0xF8	; 248
 6d8:	8e bd       	out	0x2e, r24	; 46
						state = 0;
 6da:	10 92 79 00 	sts	0x0079, r1
 6de:	10 92 78 00 	sts	0x0078, r1
						Lcd4_Clear();
 6e2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
 6e6:	5e cf       	rjmp	.-324    	; 0x5a4 <main+0x6e>
					}else if(!bit_is_clear(PINB,3)){
 6e8:	b3 9b       	sbis	0x16, 3	; 22
 6ea:	5c cf       	rjmp	.-328    	; 0x5a4 <main+0x6e>
						PORTC |= (1<<3);
 6ec:	ab 9a       	sbi	0x15, 3	; 21
						COUNTD++;
 6ee:	9f ef       	ldi	r25, 0xFF	; 255
 6f0:	a9 1a       	sub	r10, r25
 6f2:	b9 0a       	sbc	r11, r25
						STOP_TIMER0;
 6f4:	8e b5       	in	r24, 0x2e	; 46
 6f6:	88 7f       	andi	r24, 0xF8	; 248
 6f8:	8e bd       	out	0x2e, r24	; 46
						state = 0;
 6fa:	10 92 79 00 	sts	0x0079, r1
 6fe:	10 92 78 00 	sts	0x0078, r1
						Lcd4_Clear();
 702:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Clear>
 706:	4e cf       	rjmp	.-356    	; 0x5a4 <main+0x6e>

00000708 <strcat>:
 708:	fb 01       	movw	r30, r22
 70a:	dc 01       	movw	r26, r24
 70c:	0d 90       	ld	r0, X+
 70e:	00 20       	and	r0, r0
 710:	e9 f7       	brne	.-6      	; 0x70c <strcat+0x4>
 712:	11 97       	sbiw	r26, 0x01	; 1
 714:	01 90       	ld	r0, Z+
 716:	0d 92       	st	X+, r0
 718:	00 20       	and	r0, r0
 71a:	e1 f7       	brne	.-8      	; 0x714 <strcat+0xc>
 71c:	08 95       	ret

0000071e <itoa>:
 71e:	45 32       	cpi	r20, 0x25	; 37
 720:	51 05       	cpc	r21, r1
 722:	20 f4       	brcc	.+8      	; 0x72c <itoa+0xe>
 724:	42 30       	cpi	r20, 0x02	; 2
 726:	10 f0       	brcs	.+4      	; 0x72c <itoa+0xe>
 728:	0c 94 9a 03 	jmp	0x734	; 0x734 <__itoa_ncheck>
 72c:	fb 01       	movw	r30, r22
 72e:	10 82       	st	Z, r1
 730:	cb 01       	movw	r24, r22
 732:	08 95       	ret

00000734 <__itoa_ncheck>:
 734:	bb 27       	eor	r27, r27
 736:	4a 30       	cpi	r20, 0x0A	; 10
 738:	31 f4       	brne	.+12     	; 0x746 <__itoa_ncheck+0x12>
 73a:	99 23       	and	r25, r25
 73c:	22 f4       	brpl	.+8      	; 0x746 <__itoa_ncheck+0x12>
 73e:	bd e2       	ldi	r27, 0x2D	; 45
 740:	90 95       	com	r25
 742:	81 95       	neg	r24
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__utoa_common>

0000074a <__utoa_ncheck>:
 74a:	bb 27       	eor	r27, r27

0000074c <__utoa_common>:
 74c:	fb 01       	movw	r30, r22
 74e:	55 27       	eor	r21, r21
 750:	aa 27       	eor	r26, r26
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	aa 1f       	adc	r26, r26
 758:	a4 17       	cp	r26, r20
 75a:	10 f0       	brcs	.+4      	; 0x760 <__utoa_common+0x14>
 75c:	a4 1b       	sub	r26, r20
 75e:	83 95       	inc	r24
 760:	50 51       	subi	r21, 0x10	; 16
 762:	b9 f7       	brne	.-18     	; 0x752 <__utoa_common+0x6>
 764:	a0 5d       	subi	r26, 0xD0	; 208
 766:	aa 33       	cpi	r26, 0x3A	; 58
 768:	08 f0       	brcs	.+2      	; 0x76c <__utoa_common+0x20>
 76a:	a9 5d       	subi	r26, 0xD9	; 217
 76c:	a1 93       	st	Z+, r26
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	79 f7       	brne	.-34     	; 0x750 <__utoa_common+0x4>
 772:	b1 11       	cpse	r27, r1
 774:	b1 93       	st	Z+, r27
 776:	11 92       	st	Z+, r1
 778:	cb 01       	movw	r24, r22
 77a:	0c 94 bf 03 	jmp	0x77e	; 0x77e <strrev>

0000077e <strrev>:
 77e:	dc 01       	movw	r26, r24
 780:	fc 01       	movw	r30, r24
 782:	67 2f       	mov	r22, r23
 784:	71 91       	ld	r23, Z+
 786:	77 23       	and	r23, r23
 788:	e1 f7       	brne	.-8      	; 0x782 <strrev+0x4>
 78a:	32 97       	sbiw	r30, 0x02	; 2
 78c:	04 c0       	rjmp	.+8      	; 0x796 <strrev+0x18>
 78e:	7c 91       	ld	r23, X
 790:	6d 93       	st	X+, r22
 792:	70 83       	st	Z, r23
 794:	62 91       	ld	r22, -Z
 796:	ae 17       	cp	r26, r30
 798:	bf 07       	cpc	r27, r31
 79a:	c8 f3       	brcs	.-14     	; 0x78e <strrev+0x10>
 79c:	08 95       	ret

0000079e <_exit>:
 79e:	f8 94       	cli

000007a0 <__stop_program>:
 7a0:	ff cf       	rjmp	.-2      	; 0x7a0 <__stop_program>
